Consider porting to SDL2 + Dear Imgui + Bgfx in the distant future
Assess the benfits
Overall performance will definitely improve but I will have to rewrite a
lot of code
I would have been better off choosing this trio at the beginning of the project
https://stackoverflow.com/questions/25232756/sdl2-rendering-into-qwidget
https://stackoverflow.com/questions/43335291/smooth-inertial-scrolling-with-sdl2
https://github.com/NoAvailableAlias/nano-signal-slot
https://github.com/nemequ/hedley

@Paolo-Oliverio Suggested I look into choosing a color palette

image, view, sampler
vulkan textures

----------------------------------- resources ----------------------------------

Have a look at Pro Motion NG

this is cool
  https://github.com/plasma-umass/Mesh

https://lospec.com/pixel-art-tutorials
https://www.cosmigo.com/
https://lospec.com/palette-list/importing-palettes

UTI
  there doesn't seem to be a good reason to declare a custom UTI
  just use the dynamically generated one
  
  https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html
  https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html
  https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
  https://alastairs-place.net/blog/2012/06/06/utis-are-better-than-you-think-and-heres-why/

  function decode(input) {
    const key = "abcdefghkmnpqrstuvwxyz0123456789"
    const char2binary = char => key.indexOf(char).toString(2).padStart(5, "0");
    const binary = Array.prototype.map.call(input, char2binary).join("");
    const bytes = binary.match(/.{1,8}/g).map(str => parseInt(str, 2));
    return bytes.map(byte => String.fromCharCode(byte)).join("");
  }
  
  run mdls to get UTI of file

----------------------------------- community ----------------------------------

should I make a post to r/gamedev?
  they might be interested in this
  could be a good place to get feedback
  laterforreddit.com

README
  probably does what you need
  it's free so why not give it a try

--------------------------------- build system ---------------------------------

Could be useful
  https://stackoverflow.com/questions/53771040/how-do-you-use-file-lists-xcfilelist-within-xcode-10-script-build-phases

Build system
  https://stackoverflow.com/questions/2144406/how-to-make-shallow-git-submodules
  https://github.com/ionyshch/cmake-bundle-macos/blob/master/CMakeLists.txt
  https://stackoverflow.com/questions/41345844/adding-header-only-dependencies-with-cmake
  https://cmake.org/cmake/help/latest/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.html#prop_tgt:MACOSX_BUNDLE_INFO_PLIST
  https://cmake.org/cmake/help/latest/module/CPack.html
  https://cmake.org/cmake/help/latest/module/BundleUtilities.html

build from commandline
  xcodebuild
  msbuild

windows packaged app
  Windows RunTime (WinRT)
  Universal Windows Platform (UWP)

directory structure
  tests
  internal libraries
  external libraries
  core source
    folders instead of groups maybe?
  platform specific
    that mouse thing
    xcode stuff
    visual studio stuff
  git submodules maybe?
    https://stackoverflow.com/questions/15844542/git-symlink-reference-to-a-file-in-an-external-repository/27770463#27770463

--------------------------------- optimizations --------------------------------

optimize LayerCells
  we need stable pointers to Cells
  std::deque keeps pointers stable if you insert or erase from either end
  are these guarantees enough?
    how about using std::vector and emitting currCellChanged more often?
  in Timeline
    in a lot of places, we call changePos even through the position isn't changing
    this is because the address of the cell is changing
    changing the way the currCellChanged signal is emitted could break things

filled polygon
  polygon to triangles (ear something)
  even-odd fill rule
  fill triangles
  scanline algorithm for filling polygons
  http://www.sunshine2k.de/coding/java/Polygon/Filling/FillPolygon.htm
  http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html
  https://fgiesen.wordpress.com/2013/02/08/triangle-rasterization-in-practice/

lto
  99fb460bb1d36e6dab434940a0ea62ddbeecc69c
  none
    769,856 bytes
  monolithic
    722,208 bytes

fixed byte order image formats
  remove qRgb calls
  use RGBA_8888
  measure the speed increase
  qRgba pixel format and rgba fixed order pixel format can coexist
  strongly typed pixel formats?
  might not actually be an optimization
    qt is optimized for ARGB32 not RGBA8888
    we'd be saving a few milliseconds on reading and writing
    but compositing might slow down a bit

are there resources than can be shared between windows?
  global resource cache might be useful

more efficient status message updates
  there might be situations where the status bar is updated multiple times and
  only the last update is seen

thick line
  https://stackoverflow.com/questions/11194876/clip-line-to-screen-coordinates/11195387
  https://www.skytopia.com/project/articles/compsci/clipping.html
  http://kt8216.unixcab.org/murphy/index.html

don't clear the whole overlay
  do we really need to clear the whole thing all the time
  there are some places where we must clear the whole thing

why is drawing on large images (screenshots) so slow?
  just moving the mouse around is slow
  maybe it's compositing
  optimize compositing just one layer
  use a profiler!

----------------------------------- scripting ----------------------------------

scripting interface
  command-line interface
  in-app scripting interface maybe
  interactive command prompt accessible from ui perhaps
  what are the potential use cases for this?
    automatic export
    bulk operations
    
transform a layer or transform a frame
  would it make sense to extend this concept to all tools?
  bulk operations?
  apply the actions of a tool on multiple cells

----------------------------------- palette ------------------------------------

differentiate between indexed with full alpha and indexed with transparent entry
  if there is a single fully transparent entry then it will be possible to
  composite indexed images into indexed images

optimize the palette carefully
  if we only export part of the palette we must make sure that there aren't any
  indicies in the image that are out of range
  we could determine the maximum index in the image and export all entries up to
  that index
  we could provide a button that optimizes the palette

palette index out of range
  we currently get an error from libpng
  need to handle this properly
  maybe the palette should be resizable?
    this would make it possible to export a small palette while preventing out
    of range indicies
  
palette manipulation
  reordering the palette could be useful
  inserting or removing transparent blank from the start is especially useful
  
compositing index images is broken
  it kind of gets weird if index 0 doesn't correspond to the color 0
  i'm not really sure what the "correct" behaviour is

generate a palette from a gradient

---------------------------------- features ------------------------------------

make exporting less tedious
  store paths in QSettings
  would it be useful to copy export settings to and from the clipboard?
  key_export_frame might make more sense with ALT instead of SHIFT

proper undo/redo system
  an application-wide undo system would be cool

behave like a proper Single Document Interface (SDI) application
  qtbase/examples/widgets/mainwindows/sdi

quicklook plugin
  https://fespinoza.github.io/creating-a-quicklook-plugin-for-a-document-based-macos-application
  https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/Quicklook_Programming_Guide/Introduction/Introduction.html

are frame tags useful?
  being able to give a name to a span of frames
  you can kind of achieve this by using layers (layer for each tag)
    i think that's what I used to do with the old pixel animator
  another way would be to split it into multiple files (file for each tag)
  how would the interface look?
    a table of tags above timeline
      table would contain the names and a visual
      takes a lot of space
    a space for horizontal lines
      the lines would stack on top of each other if tags are overlapping
      tooltip would show the name
      uses signficantly less space

--------------------------------- refactoring ----------------------------------

more abstract tool interface
  use QImage::cacheKey to avoid emitChanges
  states, state transitions and state updates
    can all tools fit into this restricted model?
  mouseLeave event handlers seem to all be the same
  something similar to DragPaintTool but for all tools
  RectangleSelectTool and PolygonSelectTool are almost identical

remove signals from tools (maybe?)
  tools update a data structure
  another system reads data structure and sends signals
  not sure if this is a real improvement
  probably ties in with making a more abstract tool interface

define what the application does and use that to guide refactoring
  similar amount of detail as the previous plans

------------------------------------- tools ------------------------------------

gradient tool
  radial gradient?
  bayer matrix?
  
scale tool
  it's possible now that we have dynamically resizable cells
  we could also allow the user to resize the canvas
  
Maybe an ellipse tool

---------------------------------- minor bugs ----------------------------------

what's up the the height of the timeline?
  reduce to min then go fullscreen
  https://forum.qt.io/topic/109357/prevent-the-child-of-a-qsplitter-from-resizing-when-the-splitter-resizes
  might need to create a custom splitter
  
set cursor and respond to clicks more precisely
  setMask could help
  https://doc.qt.io/qt-5/qwidget.html#setMask

editor cursor update issues
  it seems like the cursor will only update after a mouseMove event
  cursor doesn't update when
    zooming out of editor and mouse leaves
    mouse enters editor while dragging

panels can be nested
  download file in chrome then CMD+SHIFT+G
  what's up with the file dialog in export dialog?
  is this a bug?

growCell overflows
  could overflow cell pos
  could exceed max image size
  check for other places where this could be a problem

" - edited" in the window title
  https://bugreports.qt.io/browse/QTBUG-79677

editor scaling is sometimes a pixel off
  this might be due to QPainter using floats
  might have to do scaling myself

-------------------------------- minor features --------------------------------

remove layer button appears when hovering layer name
  would this be more intuitive than a button that removes the current layer?
  
should the editor keys go in a menubar?
  how else are users supposed to discover these keys?
  could put them in a help menu

editor scale in status bar

ignore the waking click

zoom into the mouse instead of zooming into the center

------------------------------- minor refactoring ------------------------------

there might be a few random constants that should be in config.hpp but aren't

Should probably be calling update() instead of repaint() in most places

Should probably be using mouse release instead of mouse press in some places
