Maybe an ellipse tool

https://lospec.com/pixel-art-tutorials
https://www.cosmigo.com/
https://lospec.com/palette-list/importing-palettes

Consider porting to SDL2 + Dear Imgui + Bgfx in the distant future
Assess the benfits
Overall performance will definitely improve but I will have to rewrite a
lot of code
I would have been better off choosing this trio at the beginning of the project
https://stackoverflow.com/questions/25232756/sdl2-rendering-into-qwidget
https://stackoverflow.com/questions/43335291/smooth-inertial-scrolling-with-sdl2
https://github.com/NoAvailableAlias/nano-signal-slot
https://github.com/nemequ/hedley

@Paolo-Oliverio Suggested I look into choosing a color palette

Have a look at Pro Motion NG

A builtin calculator?
  just a text box and a label (below the palette maybe)
  can sometimes be useful
  is it really necessary?
  how often will it be used?
  if you find yourself needing to use a calculator then
    maybe there is a feature missing

image, view, sampler
vulkan textures

transform a layer or transform a frame
  would it make sense to extend this concept to all tools?
  bulk operations?
  apply the actions of a tool on multiple cells

set cursor and respond to clicks more precisely
  setMask could help
  https://doc.qt.io/qt-5/qwidget.html#setMask

Have a look at qtbase/examples/widgets/mainwindows/sdi
There's a lot to learn

Should probably be calling update() instead of repaint() in most places
Should probably be using mouse release instead of mouse press in some places

remove layer button appears when hovering layer name
  would this be more intuitive than a button that removes the current layer?

there might be a few random constants that should be in config.hpp but aren't

should I make a post to r/gamedev?
  they might be interested in this
  could be a good place to get feedback
  laterforreddit.com

use the status bar for more than just tools
  it could make sense to use it for the color picker
  at the moment it seems underappreciated

Could be useful
  https://stackoverflow.com/questions/53771040/how-do-you-use-file-lists-xcfilelist-within-xcode-10-script-build-phases

Build system
  https://stackoverflow.com/questions/2144406/how-to-make-shallow-git-submodules
  https://github.com/ionyshch/cmake-bundle-macos/blob/master/CMakeLists.txt
  https://stackoverflow.com/questions/41345844/adding-header-only-dependencies-with-cmake
  https://cmake.org/cmake/help/latest/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.html#prop_tgt:MACOSX_BUNDLE_INFO_PLIST
  https://cmake.org/cmake/help/latest/module/CPack.html
  https://cmake.org/cmake/help/latest/module/BundleUtilities.html

generate a palette from a gradient

filled polygon
  polygon to triangles (ear something)
  even-odd fill rule
  fill triangles
  scanline algorithm for filling polygons
  http://www.sunshine2k.de/coding/java/Polygon/Filling/FillPolygon.htm
  http://www.sunshine2k.de/coding/java/TriangleRasterization/TriangleRasterization.html

scale tool
  it's possible now that we have dynamically resizable cells
  we could also allow the user to resize the canvas

proper undo/redo system
  an application-wide undo system would be cool

optimize LayerCells
  we need stable pointers to Cells
  std::deque keeps pointers stable if you insert or erase from either end
  are these guarantees enough?
  in Timeline
    in a lot of places, we call changePos even through the position isn't changing
    this is because the address of the cell is changing
    changing the way the currCellChanged signal is emitted could break things

lto
  99fb460bb1d36e6dab434940a0ea62ddbeecc69c
  none
    769,856 bytes
  monolithic
    722,208 bytes

keys for info.plist
  https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html

scripting interface
  maybe applescript
    https://www.raywenderlich.com/1033-making-a-mac-app-scriptable-tutorial
  command-line interface is probably much easier

are there resources than can be shared between windows?
  global resource cache might be useful

editor scaling is sometimes a pixel off
  this might be due to QPainter using floats
  might have to do scaling myself

fixed byte order image formats
  remove qRgb calls
  use RGBA_8888
  measure the speed increase

differentiate between indexed with full alpha and indexed with transparent entry
  if there is a single fully transparent entry then it will be possible to
  composite indexed images into indexed images

optimize the palette carefully
  if we only export part of the palette we must make sure that there aren't any
  indicies in the image that are out of range
  we could determine the maximum index in the image and export all entries up to
  that index
  we could provide a button that optimizes the palette

palette index out of range
  we currently get an error from libpng and an incomplete png file (no IEND)
  need to handle this properly
  
compositing index images is broken
  it kind of gets weird if index 0 doesn't correspond to the color 0
  i'm not really sure what the "correct" behaviour is

make exporting less tedious
  store paths in QSettings
  assign names to each frame
  would it be useful to copy export settings to and from the clipboard?
  should export settings be kept in the sprite file?

gradient tool
  radial gradient?
  bayer matrix?

would the user ever want to automatically adjust the scale of the editor?

make the timeline locking mechinism more bullet proof
  locking the timeline means "I don't want the current cell to be changed"
  also lock the tool if it ever becomes possible to change tools with keys
  should we emit a signal when the lock stops an operation?
    show status message
  perhaps locking could be more broad (simple)
    lock the whole timeline

invesigate focus gain/loss and mouse events
  do we always get a mouseUp after a mouseDown?
  if we don't, the timeline might not get unlocked

what's up the the height of the timeline?
  reduce to min then go fullscreen

think about where you rest your fingers on the keyboard
  use this to influence common key bindings
  think about trackpad users and mouse users
  think about people with fancy mice that have extra buttons

more abstract tool interface
  use QImage::cacheKey to avoid emitChanges
  states, state transitions and state updates
    can all tools fit into this restricted model?
  mouseLeave event handlers seem to all be the same
  something similar to DragPaintTool but for all tools

more efficient status message updates
  there are situations where the status bar is updated multiple times and only
  the last update is seen

is DetachReason necessary?
  do we really need to clearStatus in detachCell?
